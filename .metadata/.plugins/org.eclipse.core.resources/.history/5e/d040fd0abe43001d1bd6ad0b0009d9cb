package com.example.demo.controller;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpStatus;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.CatalogDetails;
import com.google.common.base.Objects;

@RestController
@RequestMapping("/details")
public class UdsController {

	/*
	 * @GetMapping("{favoriteId}/users/{userId}") public ResponseEntity
	 * loadFavoritesWorkoutForDay(@PathVariable Integer userId,
	 * 
	 * @PathVariable Integer favoriteId,
	 * 
	 * @RequestHeader("Authorization") String authHeader) { // Claims
	 * claims=tokenHelper.getAllClaimsFromToken(authHeader); ArrayList<Integer>
	 * tagIds=(ArrayList<Integer>) claims.get("tagids", ArrayList.class);
	 * if(tagIds.contains(SUBSCRIPTION_TAG_ID)==false) {
	 * if(permissionsService.isSingleCourseProductUser(tagIds)==false){ return
	 * ResponseEntity.status(HttpStatus.FORBIDDEN).
	 * body("Permission Denied.Not an authorized user."); } }
	 * Optional<UsersBYOFavorites> usersBYOFavoritesOptional=
	 * usersBYOFavoritesService.findByFavoriteId(favoriteId);
	 * if(usersBYOFavoritesOptional.isPresent()){ return
	 * ResponseEntity.ok().body(usersBYOFavoritesOptional.get()); } return
	 * ResponseEntity.ok().body("null"); }
	 */
	
	
	@RequestMapping(value="/login/infusionsoft",method = RequestMethod.POST)
	public ResponseEntity<CatalogDetails> index(@org.springframework.web.bind.annotation.RequestBody CatalogDetails user) {
		String access_token= "Lj5bAEGqUEMZ0ceby1pVWSWf4ATy";
    	//Sets up the java client, including the api url
		XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
		try {
			config.setServerURL(new URL("https://api.infusionsoft.com/crm/xmlrpc/v1?access_token="+access_token));
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		XmlRpcClient client = new XmlRpcClient();
		client.setConfig(config);

		//The secure encryption key
		String key = client_id;

		List parameters1 = new ArrayList();
		List fields = new ArrayList();
		fields.add("Id");
		fields.add("FirstName");
		fields.add("LastName");
		fields.add("Password");
		parameters1.add(key); //The secure key
		parameters1.add(user.getUserEmail()); //The table we will be adding to
		parameters1.add(fields); //The data to be added

		//Make the call
		Object[] contacts = new Object[0];
		try {
			contacts = (Object[]) client.execute("ContactService.findByEmail", parameters1);
		} catch (XmlRpcException e) {
			e.printStackTrace();
		}
		LoginSucceedResponse loginSucceedResponse=new LoginSucceedResponse();
		//Loop through results
		for (int i = 0; i < contacts.length; i++) {
			//Each item in the array is a struct
			Map contact = (Map) contacts[i];
			System.out.println("Contact FirstName " + contact.get("FirstName"));
			System.out.println("Contact LastName " + contact.get("LastName"));

			System.out.println("Contact Id " + contact.get("Id"));
			System.out.println("Contact Password " + contact.get("Password"));
			if(Objects.equals(contact.get("Password"),user.getPassword())) {
				List<Long> tagIds=getContactInfo(Long.valueOf(contact.get("Id").toString()),access_token);
				loginSucceedResponse.setFirstName(contact.get("FirstName").toString());
				if(contact.get("LastName")==null)
					loginSucceedResponse.setLastName("");
				else
					loginSucceedResponse.setLastName(contact.get("LastName").toString());
				loginSucceedResponse.setUserId(Long.valueOf(contact.get("Id").toString()));
				loginSucceedResponse.setTagIds(tagIds);
				loginSucceedResponse.setStatus(HttpStatus.OK);
				loginSucceedResponse.setUserName(user.getUserEmail());
				return new ResponseEntity<>(loginSucceedResponse,HttpStatus.OK);
			}
			else
				return new ResponseEntity<>(new LoginSucceedResponse(),HttpStatus.NETWORK_AUTHENTICATION_REQUIRED);

		}
		return new ResponseEntity<>(new LoginSucceedResponse(),HttpStatus.NOT_FOUND);
	}
	
	@RequestMapping("/{userId}")
	public List<CatalogDetails> getDetails(@PathVariable("userId") String userId){
		
		return Collections.singletonList(
				new CatalogDetails("Ashutosh","user details", 10)
				);
		
	}
	
	
	
}