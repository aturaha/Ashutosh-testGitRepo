package com.example.demo.service;


import com.amazonaws.xray.spring.aop.XRayEnabled;
import com.example.demo.model.Details;
import com.example.demo.repositry.DetailsRepository;
import com.example.demo.repositry.MasterySetsRepository;
import com.example.demo.dto.DetailsDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

@Service
//@XRayEnabled
public class CoreService {
    @Autowired
    DetailsRepository detailsRepository;

    @Autowired
    MasterySetsRepository masterySetsRepository;

    @Cacheable(value="core", key = "#root.methodName")
    public Map<Integer, List<DetailsDTO>> findAll() {
        List<Details> coreExercises=detailsRepository.findAll();
        List<DetailsDTO> exercisesDTOList=new LinkedList<>();
       
        
        coreExercises.stream().forEach(exercise -> {
			/*
			 * Map<Integer,List<ExercisesFocusPoints>>
			 * exercisesFocusPointsMap=exercise.getExercisesFocusPoints().stream().
			 * collect(Collectors.groupingBy(x->x.getType()));
			 * Map<Integer,List<ExercisesInstructions>>
			 * exercisesInstructionsMap=exercise.getExercisesInstructions().stream().
			 * collect(Collectors.groupingBy(x->x.getType()));
			 * Map<Integer,List<ExercisesVideos>>
			 * exercisesVideosMap=exercise.getExercisesVideos().stream().
			 * collect(Collectors.groupingBy(x->x.getTag())); String
			 * masteryLevel=exercise.getMasterySets().getMasteryLevel(); Map<Integer,
			 * MasterySets> masterySetsMap=findAllSteps(masteryLevel);
			 */
        	DetailsDTO exercisesDTO=DetailsDTO.builder()
                    .exerciseId(exercise.getExerciseId())
                    .name(exercise.getName())
                    .imName(exercise.getImName())
                    .element(exercise.getElement())
                    .elementFullName(exercise.getElementFullName())
                    .progressionLevel(exercise.getProgressionLevel())
                    .imMastery(exercise.getImMastery())
                    .notation(exercise.getNotation())
                    .build();
            exercisesDTOList.add(exercisesDTO);

       });
       // Map<Integer,List<DetailsDTO>> coreExercisesMap = null;
     //   Map<Integer,List<DetailsDTO>> detailsMap=exercisesDTOList.stream().collect(
       //         Collectors.groupingBy(e->e.getCourseInfo().getTagId(), LinkedHashMap::new, Collectors.toCollection(ArrayList::new)));
       // return detailsMap;
        return exercisesDTOList;
    }
	

    @CacheEvict(value = "core", allEntries = true)
    public void clearCache() {
        System.out.println("..........Cleared task cache");
    }
}

